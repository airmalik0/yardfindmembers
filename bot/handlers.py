from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import List
import os
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
parent_dir = Path(__file__).parent.parent
if str(parent_dir) not in sys.path:
    sys.path.insert(0, str(parent_dir))

from utils.table_generator import TableGenerator
from utils.data_models import AnalysisResult

from keyboards import (
    get_main_menu,
    get_mode_keyboard,
    get_confirmation_keyboard,
    get_back_keyboard,
    get_top_k_keyboard
)
from analyzer import analyze_profiles
from messages import MESSAGES

router = Router()


class AnalysisStates(StatesGroup):
    waiting_for_mode = State()
    waiting_for_top_k = State()
    waiting_for_criteria = State()
    confirming_analysis = State()


@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        MESSAGES["welcome"],
        reply_markup=get_main_menu()
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        MESSAGES["help"],
        reply_markup=get_main_menu()
    )


@router.callback_query(F.data == "start_analysis")
async def start_analysis(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        MESSAGES["select_mode"],
        reply_markup=get_mode_keyboard()
    )
    await state.set_state(AnalysisStates.waiting_for_mode)


@router.callback_query(F.data.in_(["mode_professional", "mode_personal"]), AnalysisStates.waiting_for_mode)
async def select_mode(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    mode = "professional" if callback.data == "mode_professional" else "personal"
    await state.update_data(mode=mode)
    
    mode_text = "Professional" if mode == "professional" else "Personal"
    
    # –¢–µ–ø–µ—Ä—å —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    await callback.message.edit_text(
        f"üìä –†–µ–∂–∏–º: **{mode_text}**\n\n"
        f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ AI:\n"
        f"(–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)",
        reply_markup=get_top_k_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AnalysisStates.waiting_for_top_k)


@router.callback_query(F.data.startswith("top_k_"), AnalysisStates.waiting_for_top_k)
async def select_top_k(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ callback_data
    top_k = int(callback.data.split("_")[2])
    await state.update_data(top_k=top_k)
    
    data = await state.get_data()
    mode = data.get("mode", "professional")
    mode_text = "Professional" if mode == "professional" else "Personal"
    
    if mode == "personal":
        info_text = MESSAGES["personal_info"]
    else:
        info_text = MESSAGES["professional_info"]
    
    analysis_info = f"üîç –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI: **{top_k} –ø—Ä–æ—Ñ–∏–ª–µ–π**" if top_k > 0 else "üîç **–ë–µ–∑ AI –∞–Ω–∞–ª–∏–∑–∞** (—Ç–æ–ª—å–∫–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏)"
    
    await callback.message.edit_text(
        f"üìä –†–µ–∂–∏–º: **{mode_text}**\n"
        f"{analysis_info}\n\n"
        f"{info_text}\n\n"
        f"{MESSAGES['enter_criteria']}",
        reply_markup=get_back_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AnalysisStates.waiting_for_criteria)


@router.message(AnalysisStates.waiting_for_criteria)
async def process_criteria(message: Message, state: FSMContext):
    criteria = message.text.strip()
    
    if len(criteria) < 3:
        await message.answer(
            "‚ùå –ö—Ä–∏—Ç–µ—Ä–∏–π —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_back_keyboard()
        )
        return
    
    await state.update_data(criteria=criteria)
    data = await state.get_data()
    mode = data.get("mode", "professional")
    top_k = data.get("top_k", 10)
    mode_text = "Professional" if mode == "professional" else "Personal"
    
    analysis_info = f"**–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI:** {top_k} –ø—Ä–æ—Ñ–∏–ª–µ–π" if top_k > 0 else "**–ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI:** –û—Ç–∫–ª—é—á–µ–Ω (—Ç–æ–ª—å–∫–æ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ)"
    
    await message.answer(
        f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞:**\n\n"
        f"**–†–µ–∂–∏–º:** {mode_text}\n"
        f"{analysis_info}\n"
        f"**–ö—Ä–∏—Ç–µ—Ä–∏–π:** {criteria}\n\n"
        f"–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑?",
        reply_markup=get_confirmation_keyboard(),
        parse_mode="Markdown"
    )
    await state.set_state(AnalysisStates.confirming_analysis)


@router.callback_query(F.data == "confirm_analysis", AnalysisStates.confirming_analysis)
async def confirm_analysis(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    data = await state.get_data()
    mode = data.get("mode", "professional")
    criteria = data.get("criteria", "")
    top_k = data.get("top_k", 10)
    
    if top_k > 0:
        status_text = f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ñ–∏–ª–∏...\n" \
                     f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {top_k} –ø—Ä–æ—Ñ–∏–ª–µ–π —á–µ—Ä–µ–∑ AI\n" \
                     f"–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    else:
        status_text = f"üîç –†–∞–Ω–∂–∏—Ä—É—é –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏...\n" \
                     f"–ë–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ AI –∞–Ω–∞–ª–∏–∑–∞\n" \
                     f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥."
    
    status_message = await callback.message.edit_text(
        status_text,
        reply_markup=None
    )
    
    try:
        results = await analyze_profiles(criteria, mode, top_k)
        
        if not results:
            await status_message.edit_text(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=get_main_menu()
            )
        else:
            # –¢–µ–ø–µ—Ä—å results —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã AnalysisResult
            matched = [r for r in results if r.matches]
            analyzed_count = sum(1 for r in results if r.reasoning)  # –°–∫–æ–ª—å–∫–æ –±—ã–ª–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ AI
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if matched:
                response_text = format_results(matched, len(results))
                chunks = split_message(response_text, 4000)
                
                for i, chunk in enumerate(chunks):
                    if i == 0:
                        await status_message.edit_text(
                            chunk,
                            parse_mode="Markdown"
                        )
                    else:
                        await callback.message.answer(
                            chunk,
                            parse_mode="Markdown"
                        )
            else:
                # –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                if analyzed_count > 0:
                    await status_message.edit_text(
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(results)}\n"
                        f"‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ AI: {analyzed_count}\n"
                        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: 0\n\n"
                        f"–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –≤ CSV —Ñ–∞–π–ª–µ.",
                        parse_mode="Markdown"
                    )
                else:
                    await status_message.edit_text(
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è:\n"
                        f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª–µ–π: {len(results)}\n"
                        f"‚Ä¢ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ AI: –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
                        f"–í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏ –≤ CSV —Ñ–∞–π–ª–µ.",
                        parse_mode="Markdown"
                    )
            
            # –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º CSV —Ñ–∞–π–ª
            csv_path = TableGenerator.generate_csv(
                analysis_results=results,
                criteria=criteria,
                mode=mode,
                include_all_profiles=True  # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
            )
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è CSV –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Ç—É–∞—Ü–∏–∏
            if analyzed_count > 0:
                csv_caption = f"üìä CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞\n"
                if matched:
                    csv_caption += f"‚úì –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(matched)}\n"
                else:
                    csv_caption += f"–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑ {analyzed_count} –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö\n"
                csv_caption += f"–í—Å–µ {len(results)} –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏"
            else:
                csv_caption = f"üìä CSV —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è\n"
                csv_caption += f"–í—Å–µ {len(results)} –ø—Ä–æ—Ñ–∏–ª–µ–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–π –±–ª–∏–∑–æ—Å—Ç–∏\n"
                csv_caption += f"(AI –∞–Ω–∞–ª–∏–∑ –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω)"
            
            await callback.message.answer_document(
                FSInputFile(csv_path, filename=f"analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"),
                caption=csv_caption
            )
            
            os.remove(csv_path)
            
            await callback.message.answer(
                "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ß—Ç–æ –¥–∞–ª—å—à–µ?",
                reply_markup=get_main_menu()
            )
                
    except Exception as e:
        await status_message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:\n{str(e)}",
            reply_markup=get_main_menu()
        )
    
    await state.clear()


@router.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await state.clear()
    await callback.message.edit_text(
        MESSAGES["cancelled"],
        reply_markup=get_main_menu()
    )


@router.callback_query(F.data == "back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    current_state = await state.get_state()
    
    if current_state == AnalysisStates.waiting_for_criteria:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
        data = await state.get_data()
        mode = data.get("mode", "professional")
        mode_text = "Professional" if mode == "professional" else "Personal"
        
        await callback.message.edit_text(
            f"üìä –†–µ–∂–∏–º: **{mode_text}**\n\n"
            f"üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ AI:\n"
            f"(–æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Ç–∞–∫–∂–µ –±—É–¥—É—Ç –≤–∫–ª—é—á–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞)",
            reply_markup=get_top_k_keyboard(),
            parse_mode="Markdown"
        )
        await state.set_state(AnalysisStates.waiting_for_top_k)
    elif current_state == AnalysisStates.waiting_for_top_k:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞
        await callback.message.edit_text(
            MESSAGES["select_mode"],
            reply_markup=get_mode_keyboard()
        )
        await state.set_state(AnalysisStates.waiting_for_mode)
    else:
        await state.clear()
        await callback.message.edit_text(
            MESSAGES["welcome"],
            reply_markup=get_main_menu()
        )


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        MESSAGES["help"],
        reply_markup=get_back_keyboard(),
        parse_mode="Markdown"
    )


@router.callback_query(F.data == "about")
async def show_about(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        MESSAGES["about"],
        reply_markup=get_back_keyboard(),
        parse_mode="Markdown"
    )


def format_results(results: List, total: int) -> str:
    text = f"‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞**\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: **{len(results)}** –∏–∑ {total} –ø—Ä–æ—Ñ–∏–ª–µ–π\n\n"
    
    for i, result in enumerate(results[:10], 1):
        text += f"**{i}. {result.profile_name}**\n"
        text += f"üí° {result.reasoning[:200] if result.reasoning else '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—é'}"
        if result.reasoning and len(result.reasoning) > 200:
            text += "..."
        text += f"\nüìä –ë–ª–∏–∑–æ—Å—Ç—å: {result.similarity_score:.3f}\n\n"
    
    if len(results) > 10:
        text += f"\n_... –∏ –µ—â–µ {len(results) - 10} –ø—Ä–æ—Ñ–∏–ª–µ–π_"
    
    return text


def split_message(text: str, max_length: int) -> List[str]:
    if len(text) <= max_length:
        return [text]
    
    chunks = []
    current_chunk = ""
    
    for line in text.split('\n'):
        if len(current_chunk) + len(line) + 1 > max_length:
            if current_chunk:
                chunks.append(current_chunk)
            current_chunk = line
        else:
            if current_chunk:
                current_chunk += '\n'
            current_chunk += line
    
    if current_chunk:
        chunks.append(current_chunk)
    
    return chunks


